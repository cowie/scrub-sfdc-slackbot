{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","jsforce-api-metadata.min.js","lib/api/metadata.js","node_modules/browserify/node_modules/buffer/index.js","node_modules/browserify/node_modules/buffer/node_modules/base64-js/lib/b64.js","node_modules/browserify/node_modules/buffer/node_modules/ieee754/index.js","node_modules/browserify/node_modules/buffer/node_modules/isarray/index.js","node_modules/browserify/node_modules/process/browser.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","jsforce","modules","api","Metadata","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"process","Buffer","convertToSaveResult","result","saveResult","_","clone","success","convertToUpsertResult","upsertResult","created","convertToMetadataInfo","rec","metadataInfo","$","inherits","events","stream","Promise","SOAP","conn","_conn","prototype","pollInterval","pollTimeout","_invoke","method","message","callback","soapEndpoint","xmlns","endpointUrl","instanceUrl","version","invoke","then","res","thenCall","createAsync","type","metadata","Number","convert","md","isArray","map","AsyncResultLocator","createSync","create","results","readSync","read","fullNames","records","updateAsync","updateMetadata","umd","updateSync","update","upsertSync","upsert","deleteAsync","isString","fullName","del","deleteSync","rename","oldFullName","newFullName","checkStatus","ids","asyncProcessId","describe","asOfVersion","metadataObjects","mo","childXmlNames","inFolder","metaFile","partialSaveAllowed","testRequired","list","queries","retrieve","request","RetrieveResultLocator","checkRetrieveStatus","id","deploy","zipInput","options","isFunction","deferred","defer","isObject","pipe","bufs","on","d","push","resolve","concat","toString","String","promise","zipContentB64","ZipFile","DeployOptions","DeployResultLocator","checkDeployStatus","includeDetails","isBoolean","done","checkOnly","ignoreWarnings","rollbackOnError","numberComponentErrors","numberComponentsDeployed","numberComponentsTotal","numberTestErrors","numberTestsCompleted","numberTestsTotal","meta","_meta","_results","_isArray","EventEmitter","onResolve","onReject","convertType","nextTick","err","check","_ids","poll","interval","timeout","startTime","Date","getTime","now","errMsg","emit","resultArr","len","setTimeout","complete","reject","super_","resultStream","Readable","reading","_read","zipFile","_process","buffer",2,"typedArraySupport","arr","Uint8Array","foo","subarray","byteLength","kMaxLength","TYPED_ARRAY_SUPPORT","arg","parent","undefined","fromNumber","fromString","arguments","fromObject","that","allocate","checked","string","encoding","write","object","isBuffer","fromBuffer","fromArray","TypeError","ArrayBuffer","fromTypedArray","fromArrayBuffer","fromArrayLike","fromJsonObject","copy","array","__proto__","data","fromPool","poolSize","rootParent","RangeError","SlowBuffer","subject","buf","loweredCase","utf8ToBytes","base64ToBytes","toLowerCase","slowToString","start","end","Infinity","hexSlice","utf8Slice","asciiSlice","binarySlice","base64Slice","utf16leSlice","hexWrite","offset","remaining","strLen","parsed","parseInt","substr","isNaN","utf8Write","blitBuffer","asciiWrite","asciiToBytes","binaryWrite","base64Write","ucs2Write","utf16leToBytes","base64","fromByteArray","slice","Math","min","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","decodeCodePointsArray","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","apply","ret","out","toHex","bytes","checkOffset","ext","checkInt","value","max","objectWriteUInt16","littleEndian","j","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","ieee754","writeDouble","base64clean","str","stringtrim","replace","INVALID_BASE64_RE","trim","units","leadSurrogate","charCodeAt","byteArray","c","hi","lo","toByteArray","src","dst","INSPECT_MAX_BYTES","_augment","Symbol","species","Object","defineProperty","configurable","b","_isBuffer","compare","x","y","isEncoding","pos","item","equals","inspect","match","join","indexOf","val","byteOffset","arrayIndexOf","foundIndex","isFinite","swap","toJSON","Array","_arr","newBuf","sliceLen","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt16BE","readUInt32LE","readUInt32BE","readIntLE","pow","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","floor","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","target","targetStart","set","fill","base64-js","isarray",3,"init","lookup","revLookup","b64","tmp","placeHolders","Arr","L","tripletToBase64","num","encodeChunk","uint8","output","extraBytes","parts","maxChunkLength","len2",4,"isLE","mLen","nBytes","m","eLen","eMax","eBias","nBits","NaN","rt","abs","log","LN2",5,6,"cleanUpNextTick","draining","currentQueue","queue","queueIndex","drainQueue","run","clearTimeout","Item","fun","noop","args","title","browser","env","argv","versions","addListener","once","off","removeListener","removeAllListeners","binding","name","cwd","chdir","dir","umask"],"mappings":"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","file":"jsforce-api-metadata.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g=(g.jsforce||(g.jsforce = {}));g=(g.modules||(g.modules = {}));g=(g.api||(g.api = {}));g.Metadata = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n(function (process,Buffer){\n/*global process, Buffer */\n/**\n * @file Manages Salesforce Metadata API\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\n */\n\n'use strict';\n\nvar inherits = window.jsforce.require('inherits'),\n    events  = window.jsforce.require('events'),\n    stream  = window.jsforce.require('readable-stream'),\n    _       = window.jsforce.require('lodash/core'),\n    jsforce = window.jsforce.require('./core'),\n    Promise = window.jsforce.require('./promise'),\n    SOAP    = window.jsforce.require('./soap');\n\n/*--------------------------------------------*/\n/**\n * Class for Salesforce Metadata API\n *\n * @class\n * @param {Connection} conn - Connection object\n */\nvar Metadata = module.exports = function(conn) {\n  this._conn = conn;\n};\n\n\n/**\n * Polling interval in milliseconds\n * @type {Number}\n */\nMetadata.prototype.pollInterval = 1000;\n\n/**\n * Polling timeout in milliseconds\n * @type {Number}\n */\nMetadata.prototype.pollTimeout = 10000;\n\n\n/**\n * Call Metadata API SOAP endpoint\n *\n * @private\n */\nMetadata.prototype._invoke = function(method, message, callback) {\n  var soapEndpoint = new SOAP(this._conn, {\n    xmlns: \"http://soap.sforce.com/2006/04/metadata\",\n    endpointUrl: this._conn.instanceUrl + \"/services/Soap/m/\" + this._conn.version\n  });\n  return soapEndpoint.invoke(method, message).then(function(res) {\n    return res.result;\n  }).thenCall(callback);\n};\n\n\n/**\n * @typedef {Object} Metadata~MetadataInfo\n * @prop {String} fullName - The name of the component\n */\n\n/**\n * Asynchronously adds one or more new metadata components to the organization.\n *\n * @param {String} type - The type of metadata to create\n * @param {Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>} metadata - Metadata to create\n * @param {Callback.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} [callback] - Callback function\n * @returns {Metadata~AsyncResultLocator}\n */\nMetadata.prototype.createAsync = function(type, metadata, callback) {\n  if (Number(this._conn.version) > 30) {\n    throw new Error(\"Async metadata CRUD calls are not supported on ver 31.0 or later.\");\n  }\n  var convert = function(md) {\n    md[\"@xsi:type\"] = type;\n    return md;\n  };\n  var isArray = _.isArray(metadata);\n  metadata = isArray ? _.map(metadata, convert) : convert(metadata);\n  var res = this._invoke(\"create\", { metadata: metadata });\n  return new AsyncResultLocator(this, res, isArray).thenCall(callback);\n};\n\n/**\n * @typedef {Object} Metadata~SaveResult\n * @prop {Boolean} success - True if metadata is successfully saved\n * @prop {String} fullName - Full name of metadata object\n */\n\n/**\n * @private\n */\nfunction convertToSaveResult(result) {\n  var saveResult = _.clone(result);\n  saveResult.success = saveResult.success === 'true';\n  return saveResult;\n}\n\n/**\n * @typedef {Object} Metadata~UpsertResult\n * @prop {Boolean} success - True if metadata is successfully saved\n * @prop {String} fullName - Full name of metadata object\n * @prop {Boolean} created - True if metadata is newly created\n */\n\n/**\n * @private\n */\nfunction convertToUpsertResult(result) {\n  var upsertResult = convertToSaveResult(result);\n  upsertResult.created = upsertResult.created === 'true';\n  return upsertResult;\n}\n\n/**\n * Synonym of Metadata#create().\n *\n * @method Metadata#createSync\n * @param {String} type - The type of metadata to create\n * @param {Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>} metadata - Metadata to create\n * @param {Callback.<Metadata~SaveResult|Array.<Metadata~SaveResult>>} [callback] - Callback function\n * @returns {Promise.<Metadata~SaveResult|Array.<Metadata~SaveResult>>}\n */\n/**\n * Synchronously adds one or more new metadata components to the organization.\n *\n * @method Metadata#create\n * @param {String} type - The type of metadata to create\n * @param {Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>} metadata - Metadata to create\n * @param {Callback.<Metadata~SaveResult|Array.<Metadata~SaveResult>>} [callback] - Callback function\n * @returns {Promise.<Metadata~SaveResult|Array.<Metadata~SaveResult>>}\n */\nMetadata.prototype.createSync =\nMetadata.prototype.create = function(type, metadata, callback) {\n  var convert = function(md) {\n    md[\"@xsi:type\"] = type;\n    return md;\n  };\n  var isArray = _.isArray(metadata);\n  metadata = isArray ? _.map(metadata, convert) : convert(metadata);\n  return this._invoke(\"createMetadata\", { metadata: metadata }).then(function(results) {\n    return _.isArray(results) ? _.map(results, convertToSaveResult) : convertToSaveResult(results);\n  }).thenCall(callback);\n};\n\n/**\n * @private\n */\nfunction convertToMetadataInfo(rec) {\n  var metadataInfo = _.clone(rec);\n  delete metadataInfo.$;\n  return metadataInfo;\n}\n\n/**\n * Synonym of Metadata#read()\n *\n * @method Metadata#readSync\n * @param {String} type - The type of metadata to read\n * @param {String|Array.<String>} fullNames - full name(s) of metadata objects to read\n * @param {Callback.<Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>>} [callback] - Callback function\n * @returns {Promise.<Array.<Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>>>}\n */\n/**\n * Synchronously read specified metadata components in the organization.\n *\n * @method Metadata#read\n * @param {String} type - The type of metadata to read\n * @param {String|Array.<String>} fullNames - full name(s) of metadata objects to read\n * @param {Callback.<Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>>} [callback] - Callback function\n * @returns {Promise.<Array.<Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>>>}\n */\nMetadata.prototype.readSync =\nMetadata.prototype.read = function(type, fullNames, callback) {\n  return this._invoke(\"readMetadata\", { type: type, fullNames: fullNames }).then(function(res) {\n    return _.isArray(res.records) ? _.map(res.records, convertToMetadataInfo) : convertToMetadataInfo(res.records);\n  }).thenCall(callback);\n};\n\n/**\n * @typedef {Object} Metadata~UpdateMetadataInfo\n * @prop {String} currentName - The API name of the component or field before the update\n * @prop {Metadata~MetadataInfo} metadata - Full specification of the component or field you wish to update\n */\n\n/**\n * Asynchronously updates one or more metadata components in the organization.\n *\n * @param {String} type - The type of metadata to update\n * @param {Metadata~UpdateMetadataInfo|Array.<Metadata~UpdateMetadataInfo>} updateMetadata - Updating metadata\n * @param {Callback.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} [callback] - Callback function\n * @returns {Metadata~AsyncResultLocator}\n */\nMetadata.prototype.updateAsync = function(type, updateMetadata, callback) {\n  if (Number(this._conn.version) > 30) {\n    throw new Error(\"Async metadata CRUD calls are not supported on ver 31.0 or later.\");\n  }\n  var convert = function(umd) {\n    umd.metadata[\"@xsi:type\"] = type;\n    return umd;\n  };\n  var isArray = _.isArray(updateMetadata);\n  updateMetadata = isArray ? _.map(updateMetadata, convert) : convert(updateMetadata);\n  var res = this._invoke(\"update\", { updateMetadata: updateMetadata });\n  return new AsyncResultLocator(this, res, isArray).thenCall(callback);\n};\n\n/**\n * Synonym of Metadata#update().\n *\n * @method Metadata#updateSync\n * @param {String} type - The type of metadata to update\n * @param {Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>} updateMetadata - Updating metadata\n * @param {Callback.<Metadata~SaveResult|Array.<Metadata~SaveResult>>} [callback] - Callback function\n * @returns {Promise.<Metadata~SaveResult|Array.<Metadata~SaveResult>>}\n */\n/**\n * Synchronously updates one or more metadata components in the organization.\n *\n * @method Metadata#update\n * @param {String} type - The type of metadata to update\n * @param {Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>} updateMetadata - Updating metadata\n * @param {Callback.<Metadata~SaveResult|Array.<Metadata~SaveResult>>} [callback] - Callback function\n * @returns {Promise.<Metadata~SaveResult|Array.<Metadata~SaveResult>>}\n */\nMetadata.prototype.updateSync =\nMetadata.prototype.update = function(type, metadata, callback) {\n  var convert = function(md) {\n    md[\"@xsi:type\"] = type;\n    return md;\n  };\n  var isArray = _.isArray(metadata);\n  metadata = isArray ? _.map(metadata, convert) : convert(metadata);\n  return this._invoke(\"updateMetadata\", { metadata: metadata }).then(function(results) {\n    return _.isArray(results) ? _.map(results, convertToSaveResult) : convertToSaveResult(results);\n  }).thenCall(callback);\n};\n\n/**\n * Upserts one or more components in your organization's data.\n *\n * @param {String} type - The type of metadata to upsert\n * @param {Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>} metadata - Upserting metadata\n * @param {Callback.<Metadata~UpsertResult|Array.<Metadata~UpsertResult>>} [callback] - Callback function\n * @returns {Promise.<Metadata~UpsertResult|Array.<Metadata~UpsertResult>>}\n */\nMetadata.prototype.upsertSync =\nMetadata.prototype.upsert = function(type, metadata, callback) {\n  var convert = function(md) {\n    md[\"@xsi:type\"] = type;\n    return md;\n  };\n  var isArray = _.isArray(metadata);\n  metadata = isArray ? _.map(metadata, convert) : convert(metadata);\n  return this._invoke(\"upsertMetadata\", { metadata: metadata }).then(function(results) {\n    return _.isArray(results) ? _.map(results, convertToUpsertResult) : convertToUpsertResult(results);\n  }).thenCall(callback);\n};\n\n/**\n * Asynchronously deletes specified metadata components in the organization.\n *\n * @param {String} type - The type of metadata to delete\n * @param {String|Metadata~MetadataInfo|Array.<String>|Array.<Metadata~MetadataInfo>} metadata - The fullName of metadata or metadata info to delete. If it is passed in fullName, the type parameter should not be empty.\n * @param {Callback.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} [callback] - Callback function\n * @returns {Metadata~AsyncResultLocator}\n */\nMetadata.prototype.deleteAsync = function(type, metadata, callback) {\n  if (Number(this._conn.version) > 30) {\n    throw new Error(\"Async metadata CRUD calls are not supported on ver 31.0 or later.\");\n  }\n  var convert = function(md) {\n    if (_.isString(md)) {\n      md = { fullName : md };\n    }\n    md[\"@xsi:type\"] = type;\n    return md;\n  };\n  var isArray = _.isArray(metadata);\n  metadata = isArray ? _.map(metadata, convert) : convert(metadata);\n  var res = this._invoke(\"delete\", { metadata: metadata });\n  return new AsyncResultLocator(this, res, isArray).thenCall(callback);\n};\n\n/**\n * Synonym of Metadata#delete().\n *\n * @deprecated\n * @method Metadata#del\n * @param {String} [type] - The type of metadata to delete\n * @param {String|Metadata~MetadataInfo|Array.<String>|Array.<Metadata~MetadataInfo>} metadata - The fullName of metadata or metadata info to delete. If it is passed in fullName, the type parameter should not be empty.\n * @param {Callback.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} [callback] - Callback function\n * @returns {Metadata~AsyncResultLocator}\n */\n/**\n * Synonym of Metadata#delete().\n *\n * @method Metadata#deleteSync\n * @param {String} type - The type of metadata to delete\n * @param {String|Array.<String>} fullNames - The fullName of metadata to delete.\n * @param {Callback.<Metadata~SaveResult|Array.<Metadata~SaveResult>>} [callback] - Callback function\n * @returns {Promise.<Metadata~SaveResult|Array.<Metadata~SaveResult>>}\n */\n\n/**\n * Synchronously deletes specified metadata components in the organization.\n *\n * @method Metadata#delete\n * @param {String} type - The type of metadata to delete\n * @param {String|Array.<String>} fullNames - The fullName of metadata to delete.\n * @param {Callback.<Metadata~SaveResult|Array.<Metadata~SaveResult>>} [callback] - Callback function\n * @returns {Promise.<Metadata~SaveResult|Array.<Metadata~SaveResult>>}\n */\nMetadata.prototype.del =\nMetadata.prototype.deleteSync =\nMetadata.prototype[\"delete\"] = function(type, fullNames, callback) {\n  return this._invoke(\"deleteMetadata\", { type: type, fullNames: fullNames }).then(function(results) {\n    return _.isArray(results) ? _.map(results, convertToSaveResult) : convertToSaveResult(results);\n  }).thenCall(callback);\n};\n\n/**\n * Rename fullname of a metadata component in the organization\n *\n * @param {String} type - The type of metadata to delete\n * @param {String} oldFullName - The original fullName of metadata\n * @param {String} newFullName - The new fullName of metadata\n * @param {Callback.<Metadata~SaveResult>} [callback] - Callback function\n * @returns {Promise.<Metadata~SaveResult>}\n */\nMetadata.prototype.rename = function(type, oldFullName, newFullName, callback) {\n  return this._invoke(\"renameMetadata\", { type: type, oldFullName: oldFullName, newFullName: newFullName }).then(function(result) {\n    return convertToSaveResult(result);\n  }).thenCall(callback);\n};\n\n/**\n * Checks the status of asynchronous metadata calls\n *\n * @param {String|Array.<String>} ids - The asynchronous process ID(s)\n * @param {Callback.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} [callback] - Callback function\n * @returns {Metadata~AsyncResultLocator}\n */\nMetadata.prototype.checkStatus = function(ids, callback) {\n  var isArray = _.isArray(ids);\n  var res = this._invoke(\"checkStatus\", { asyncProcessId: ids });\n  return new AsyncResultLocator(this, res, isArray).thenCall(callback);\n};\n\n/**\n * @typedef {Object} Metadata~DescribeMetadataResult\n * @prop {Array.<Object>} metadataObjects - One or more metadata components and their attributes\n * @prop {Array.<String>} metadataObjects.childXmlNames - List of child sub-components for this component\n * @prop {String} metadataObjects.directoryName - The name of the directory in the .zip file that contains this component\n * @prop {Boolean} metadataObjects.inFolder - Indicates whether the component is in a folder or not\n * @prop {Boolean} metadataObjects.metaFile - Indicates whether the component requires an accompanying metadata file\n * @prop {String} metadataObjects.suffix - The file suffix for this component\n * @prop {String} metadataObjects.xmlName - The name of the root element in the metadata file for this component\n * @prop {String} organizationNamespace - The namespace of the organization\n * @prop {Boolean} partialSaveAllowed - Indicates whether rollbackOnError is allowed or not\n * @prop {Boolean} testRequired - Indicates whether tests are required or not\n */\n\n/**\n * Retrieves the metadata which describes your organization, including Apex classes and triggers,\n * custom objects, custom fields on standard objects, tab sets that define an app,\n * and many other components.\n *\n * @param {String} [version] - The API version for which you want metadata; for example, 29.0\n * @param {Callback.<Metadata~DescribeMetadataResult>} [callback] - Callback function\n * @returns {Promise.<Metadata~DescribeMetadataResult>}\n */\nMetadata.prototype.describe = function(version, callback) {\n  if (!_.isString(version)) {\n    callback = version;\n    version = this._conn.version;\n  }\n  return this._invoke(\"describeMetadata\", { asOfVersion: version }).then(function(res) {\n    res.metadataObjects = _.isArray(res.metadataObjects) ? res.metadataObjects : [ res.metadataObjects ];\n    res.metadataObjects = _.map(res.metadataObjects, function(mo) {\n      if (mo.childXmlNames) {\n        mo.childXmlNames = _.isArray(mo.childXmlNames) ? mo.childXmlNames: [ mo.childXmlNames ];\n      }\n      mo.inFolder = mo.inFolder === 'true';\n      mo.metaFile = mo.metaFile === 'true';\n      return mo;\n    });\n    res.partialSaveAllowed = res.partialSaveAllowed === 'true';\n    res.testRequired = res.testRequired === 'true';\n    return res;\n  }).thenCall(callback);\n};\n\n/**\n * @typedef {Object} Metadata~ListMetadataQuery\n * @prop {String} type - The metadata type, such as CustomObject, CustomField, or ApexClass\n * @prop {String} [folder] - The folder associated with the component.\n */\n\n/**\n * @typedef {Object} Metadata~FileProperties\n * @prop {String} type - The metadata type, such as CustomObject, CustomField, or ApexClass\n * @prop {String} createdById - ID of the user who created the file\n * @prop {String} createdByName - Name of the user who created the file\n * @prop {String} createdDate - Date and time when the file was created\n * @prop {String} fileName - Name of the file\n * @prop {String} fullName - The file developer name used as a unique identifier for API access\n * @prop {String} id - ID of the file\n * @prop {String} lastModifiedById - ID of the user who last modified the file\n * @prop {String} lastModifiedByName - Name of the user who last modified the file\n * @prop {String} lastModifiedDate - Date and time that the file was last modified\n * @prop {String} [manageableState] - Indicates the manageable state of the specified component if it is contained in a package\n * @prop {String} [namespacePrefix] - The namespace prefix of the component\n */\n\n/**\n * Retrieves property information about metadata components in your organization\n *\n * @param {Metadata~ListMetadataQuery|Array.<Metadata~ListMetadataQuery>} queries - The criteria object(s) specifing metadata to list\n * @param {String} [version] - The API version for which you want metadata; for example, 29.0\n * @param {Callback.<Array.<Metadata~FileProperties>>} [callback] - Callback function\n * @returns {Promise.<Array.<Metadata~FileProperties>>}\n */\nMetadata.prototype.list = function(queries, version, callback) {\n  if (!_.isString(version)) {\n    callback = version;\n    version = this._conn.version;\n  }\n  if (!_.isArray(queries)) {\n    queries = [ queries ];\n  }\n  return this._invoke(\"listMetadata\", { queries: queries, asOfVersion: version }, callback);\n};\n\n/**\n * @typedef {Object} Metadata~RetrieveRequest\n */\n\n/**\n * Retrieves XML file representations of components in an organization\n *\n * @param {Metadata~RetrieveRequest} request - Options for determining which packages or files are retrieved\n * @param {Callback.<Metadata~AsyncResult>} [callback] - Callback function\n * @returns {Metadata~RetrieveResultLocator}\n */\nMetadata.prototype.retrieve = function(request, callback) {\n  var res = this._invoke(\"retrieve\", { request: request });\n  return new RetrieveResultLocator(this, res).thenCall(callback);\n};\n\n/**\n * Checks the status of declarative metadata call retrieve() and returns the zip file contents\n *\n * @param {String} id - Async process id returned from previous retrieve request\n * @param {Callback.<Metadata~RetrieveResult>} [callback] - Callback function\n * @returns {Promise.<Metadata~RetrieveResult>}\n */\nMetadata.prototype.checkRetrieveStatus = function(id, callback) {\n  return this._invoke(\"checkRetrieveStatus\", { asyncProcessId: id }, callback);\n};\n\n/**\n * Deploy components into an organization using zipped file representations\n *\n * @param {stream.Stream|Buffer|String} zipInput - Zipped file input source in readable stream, binary buffer or Base64-encoded string\n * @param {Object} [options] - Options used in deployment\n * @param {Boolean} [options.allowMissingFiles] - Specifies whether a deploy succeeds even if files that are specified in package.xml but are not in the .zip file or not.\n * @param {Boolean} [options.autoUpdatePackage] - If a file is in the .zip file but not specified in package.xml, specifies whether the file should be automatically added to the package or not.\n * @param {Boolean} [options.checkOnly] - Indicates whether Apex classes and triggers are saved to the organization as part of the deployment (false) or not (true).\n * @param {Boolean} [options.ignoreWarnings] - Indicates whether a warning should allow a deployment to complete successfully (true) or not (false). Defaults to false.\n * @param {Boolean} [options.performRetrieve] - Indicates whether a retrieve() call is performed immediately after the deployment (true) or not (false).\n * @param {Boolean} [options.purgeOnDelete] - If true, the deleted components in the destructiveChanges.xml manifest file aren't stored in the Recycle Bin.\n * @param {Boolean} [options.rollbackOnError] - Indicates whether any failure causes a complete rollback (true) or not (false).\n * @param {Boolean} [options.runAllTests] - If true, all Apex tests defined in the organization are run.\n * @param {Array.<String>} [options.runTests] - A list of Apex tests to be run during deployment.\n * @param {Boolean} [options.singlePackage] - Indicates whether the specified .zip file points to a directory structure with a single package (true) or a set of packages (false).\n * @param {Callback.<Metadata~AsyncResult>} [callback] - Callback function\n * @returns {Metadata~DeployResultLocator}\n */\nMetadata.prototype.deploy = function(zipInput, options, callback) {\n  if (!options || _.isFunction(options)) {\n    callback = options;\n    options = {};\n  }\n  var deferred = Promise.defer();\n  if (_.isObject(zipInput) && _.isFunction(zipInput.pipe)) {\n    var bufs = [];\n    zipInput.on('data', function(d) {\n      bufs.push(d);\n    });\n    zipInput.on('end', function() {\n      deferred.resolve(Buffer.concat(bufs).toString('base64'));\n    });\n    // zipInput.resume();\n  } else if (zipInput instanceof Buffer) {\n    deferred.resolve(zipInput.toString('base64'));\n  } else if (zipInput instanceof String || typeof zipInput === 'string') {\n    deferred.resolve(zipInput);\n  } else {\n    throw \"Unexpected zipInput type\";\n  }\n\n  var self = this;\n  var res = deferred.promise.then(function(zipContentB64) {\n    return self._invoke(\"deploy\", {\n      ZipFile: zipContentB64,\n      DeployOptions: options\n    }, callback);\n  });\n  return new DeployResultLocator(this, res).thenCall(callback);\n};\n\n/**\n * Checks the status of declarative metadata call deploy()\n *\n * @param {String} id - Async process id returned from previous deploy request\n * @param {Boolean} [includeDetails] - Sets the DeployResult object to include details information (default: false)\n * @param {Callback.<Metadata~DeployResult>} [callback] - Callback function\n * @returns {Promise.<Metadata~DeployResult>}\n */\nMetadata.prototype.checkDeployStatus = function(id, includeDetails, callback) {\n  if (_.isObject(includeDetails) || _.isBoolean(includeDetails)) {\n    includeDetails = !!includeDetails;\n  } else {\n    callback = includeDetails;\n    includeDetails = false;\n  }\n  return this._invoke(\"checkDeployStatus\", {\n    asyncProcessId: id,\n    includeDetails : includeDetails\n  }).then(function(res) {\n    res.done = res.done === 'true';\n    res.success = res.success === 'true';\n    res.checkOnly = res.checkOnly === 'true';\n    if (res.ignoreWarnings) {\n      res.ignoreWarnings = res.ignoreWarnings === 'true';\n    }\n    if (res.rollbackOnError) {\n      res.rollbackOnError = res.rollbackOnError === 'true';\n    }\n    res.numberComponentErrors = Number(res.numberComponentErrors);\n    res.numberComponentsDeployed = Number(res.numberComponentsDeployed);\n    res.numberComponentsTotal = Number(res.numberComponentsTotal);\n    res.numberTestErrors = Number(res.numberTestErrors);\n    res.numberTestsCompleted = Number(res.numberTestsCompleted);\n    res.numberTestsTotal = Number(res.numberTestsTotal);\n\n    return res;\n  }).thenCall(callback);\n};\n\n\n/*--------------------------------------------*/\n\n/**\n * @typedef {Object} Metadata~AsyncResult\n * @prop {Boolean} done - Indicates whether the call has completed or not\n * @prop {String} id - ID of the component being created, updated, deleted, deployed, or retrieved\n * @prop {String} state - The state four possible values: Queued, InProgress, Completed, and Error.\n * @prop {String} [statusCode] - If an error occurred during the create(), update(), or delete() call, a status code is returned\n * @prop {String} [message] - Message corresponding to the statusCode field returned\n */\n\n/**\n * The locator class for Metadata API asynchronous call result\n *\n * @protected\n * @class Metadata~AsyncResultLocator\n * @extends events.EventEmitter\n * @implements Promise.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>\n * @param {Metadata} meta - Metadata API object\n * @param {Promise.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} results - Promise object for async result info\n * @param {Boolean} [isArray] - Indicates whether the async request is given in array or single object\n */\nvar AsyncResultLocator = function(meta, results, isArray) {\n  this._meta = meta;\n  this._results = results;\n  this._isArray = isArray;\n};\n\ninherits(AsyncResultLocator, events.EventEmitter);\n\n/**\n * Promise/A+ interface\n * http://promises-aplus.github.io/promises-spec/\n *\n * Delegate to deferred promise, return promise instance for batch result\n *\n * @method Metadata~AsyncResultLocator#then\n */\nAsyncResultLocator.prototype.then = function(onResolve, onReject) {\n  var self = this;\n  return this._results.then(function(results) {\n    var convertType = function(res) {\n      if (res.$ && res.$[\"xsi:nil\"] === 'true') {\n        return null;\n      }\n      res.done = res.done === 'true';\n      return res;\n    };\n    results = _.isArray(results) ? _.map(results, convertType) : convertType(results);\n    if (self._isArray && !_.isArray(results)) {\n      results = [ results ];\n    }\n    return onResolve(results);\n  }, onReject);\n};\n\n/**\n * Promise/A+ extension\n * Call \"then\" using given node-style callback function\n *\n * @method Metadata~AsyncResultLocator#thenCall\n */\nAsyncResultLocator.prototype.thenCall = function(callback) {\n  return _.isFunction(callback) ? this.then(function(res) {\n    process.nextTick(function() {\n      callback(null, res);\n    });\n  }, function(err) {\n    process.nextTick(function() {\n      callback(err);\n    });\n  }) : this;\n};\n\n/**\n * Check the status of async request\n *\n * @method Metadata~AsyncResultLocator#check\n * @param {Callback.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} [callback] - Callback function\n * @returns {Promise.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>}\n */\nAsyncResultLocator.prototype.check = function(callback) {\n  var self = this;\n  var meta = this._meta;\n  return this.then(function(results) {\n    var ids = _.isArray(results) ? _.map(results, function(res){ return res.id; }) : results.id;\n    self._ids = ids;\n    return meta.checkStatus(ids);\n  }).thenCall(callback);\n};\n\n/**\n * Polling until async call status becomes complete or error\n *\n * @method Metadata~AsyncResultLocator#poll\n * @param {Number} interval - Polling interval in milliseconds\n * @param {Number} timeout - Polling timeout in milliseconds\n */\nAsyncResultLocator.prototype.poll = function(interval, timeout) {\n  var self = this;\n  var startTime = new Date().getTime();\n  var poll = function() {\n    var now = new Date().getTime();\n    if (startTime + timeout < now) {\n      var errMsg = \"Polling time out.\";\n      if (self._ids) {\n        errMsg += \" Process Id = \" + self._ids;\n      }\n      self.emit('error', new Error(errMsg));\n      return;\n    }\n    self.check().then(function(results) {\n      var done = true;\n      var resultArr = _.isArray(results) ? results : [ results ];\n      for (var i=0, len=resultArr.length; i<len; i++) {\n        var result = resultArr[i];\n        if (result && !result.done) {\n          self.emit('progress', result);\n          done = false;\n        }\n      }\n      if (done) {\n        self.emit('complete', results);\n      } else {\n        setTimeout(poll, interval);\n      }\n    }, function(err) {\n      self.emit('error', err);\n    });\n  };\n  setTimeout(poll, interval);\n};\n\n/**\n * Check and wait until the async requests become in completed status\n *\n * @method Metadata~AsyncResultLocator#complete\n * @param {Callback.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} [callback] - Callback function\n * @returns {Promise.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>}\n */\nAsyncResultLocator.prototype.complete = function(callback) {\n  var deferred = Promise.defer();\n  this.on('complete', function(results) {\n    deferred.resolve(results);\n  });\n  this.on('error', function(err) {\n    deferred.reject(err);\n  });\n  var meta = this._meta;\n  this.poll(meta.pollInterval, meta.pollTimeout);\n  return deferred.promise.thenCall(callback);\n};\n\n/*--------------------------------------------*/\n/**\n * The locator class to track retreive() Metadata API call result\n *\n * @protected\n * @class Metadata~RetrieveResultLocator\n * @extends Metadata~AsyncResultLocator\n * @param {Metadata} meta - Metadata API object\n * @param {Promise.<Metadata~AsyncResult>} result - Promise object for async result of retrieve call()\n */\nvar RetrieveResultLocator = function(meta, result) {\n  RetrieveResultLocator.super_.call(this, meta, result);\n};\n\ninherits(RetrieveResultLocator, AsyncResultLocator);\n\n/**\n * @typedef {Object} Metadata~RetrieveResult\n * @prop {Array.<Metadata~FileProperties>} fileProperties - Contains information about the properties of each component in the .zip file, and the manifest file package.xml\n * @prop {String} id - ID of the component being retrieved\n * @prop {Array.<Object>} messages - Contains information about the success or failure of the retrieve() call\n * @prop {String} zipFile - The zip file returned by the retrieve request. Base 64-encoded binary data\n */\n\n/**\n * Check and wait until the async request becomes in completed status,\n * and retrieve the result data.\n *\n * @memthod Metadata~RetrieveResultLocator#complete\n * @param {Callback.<Metadata~RetrieveResult>} [callback] - Callback function\n * @returns {Promise.<Metadata~RetrieveResult>}\n */\nRetrieveResultLocator.prototype.complete = function(callback) {\n  var meta = this._meta;\n  return RetrieveResultLocator.super_.prototype.complete.call(this).then(function(result) {\n    return meta.checkRetrieveStatus(result.id);\n  }).thenCall(callback);\n};\n\n/**\n * Change the retrieved result to Node.js readable stream\n *\n * @method Metadata~RetrieveResultLocator#stream\n * @returns {stream.Readable}\n */\nRetrieveResultLocator.prototype.stream = function() {\n  var self = this;\n  var resultStream = new stream.Readable();\n  var reading = false;\n  resultStream._read = function() {\n    if (reading) { return; }\n    reading = true;\n    self.complete(function(err, result) {\n      if (err) {\n        resultStream.emit('error', err);\n      } else {\n        resultStream.push(new Buffer(result.zipFile, 'base64'));\n        resultStream.push(null);\n      }\n    });\n  };\n  return resultStream;\n};\n\n/*--------------------------------------------*/\n/**\n * The locator class to track deploy() Metadata API call result\n *\n * @protected\n * @class Metadata~DeployResultLocator\n * @extends Metadata~AsyncResultLocator\n * @param {Metadata} meta - Metadata API object\n * @param {Promise.<Metadata~AsyncResult>} result - Promise object for async result of deploy() call\n */\nvar DeployResultLocator = function(meta, result) {\n  DeployResultLocator.super_.call(this, meta, result);\n};\n\ninherits(DeployResultLocator, AsyncResultLocator);\n\n/**\n * @typedef {Object} Metadata~DeployResult\n * @prop {String} id - ID of the component being deployed\n * @prop {Boolean} checkOnly - Indicates whether this deployment is being used to check the validity of the deployed files without making any changes in the organization or not\n * @prop {String} completedDate - Timestamp for when the deployment process ended\n * @prop {String} createdDate - Timestamp for when the deploy() call was received\n * @prop {Array.<Object>} [details] - Provides the details of a deployment that is in-progress or ended, if includeDetails is set to true in checkDeployStatus() call\n * @prop {Boolean} done - Indicates whether the server finished processing the deploy() call for the specified id\n * @prop {String} [errorMessage] - Message corresponding to the values in the errorStatusCode field\n * @prop {String} [errorStatusCode] - If an error occurred during the deploy() call, a status code is returned, and the message corresponding to the status code is returned in the errorMessagefield\n * @prop {Boolean} [ignoreWarnings] - Specifies whether a deployment should continue even if the deployment generates warnings\n * @prop {String} lastModifiedDate - Timestamp of the last update for the deployment process\n * @prop {Number} numberComponentErrors - The number of components that generated errors during this deployment\n * @prop {Number} numberComponentsDeployed - The number of components deployed in the deployment process\n * @prop {Number} numberComponentsTotal - The total number of components in the deployment\n * @prop {Number} numberTestErrors - The number of Apex tests that have generated errors during this deployment\n * @prop {Number} numberTestsCompleted - The number of completedApex tests for this deployment\n * @prop {Number} numberTestsTotal - The total number of Apex tests for this deployment\n * @prop {Boolean} [rollbackOnError] - Indicates whether any failure causes a complete rollback or not. Default is true.\n * @prop {String} startDate - Timestamp for when the deployment process began\n * @prop {String} status - Indicates the current state of the deployment\n * @prop {Boolean} success - Indicates whether the deployment was successful or not\n */\n\n/**\n * Check and wait until the async request becomes in completed status,\n * and retrieve the result data.\n *\n * @method Metadata~DeployResultLocator#complete\n * @param {Callback.<Metadata~DeployResult>} [callback] - Callback function\n * @returns {Promise.<Metadata~DeployResult>}\n */\nDeployResultLocator.prototype.complete = function(includeDetails, callback) {\n  if (_.isFunction(includeDetails)) {\n    callback = includeDetails;\n    includeDetails = false;\n  }\n  var meta = this._meta;\n  return DeployResultLocator.super_.prototype.complete.call(this).then(function(result) {\n    return meta.checkDeployStatus(result.id, includeDetails);\n  }).thenCall(callback);\n};\n\n\n/*--------------------------------------------*/\n/*\n * Register hook in connection instantiation for dynamically adding this API module features\n */\njsforce.on('connection:new', function(conn) {\n  conn.metadata = new Metadata(conn);\n});\n\n}).call(this,require('_process'),require(\"buffer\").Buffer)\n\n},{\"_process\":6,\"buffer\":2}],2:[function(require,module,exports){\n(function (global){\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\nBuffer.poolSize = 8192 // not used by this implementation\n\nvar rootParent = {}\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.foo = function () { return 42 }\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\nfunction Buffer (arg) {\n  if (!(this instanceof Buffer)) {\n    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.\n    if (arguments.length > 1) return new Buffer(arg, arguments[1])\n    return new Buffer(arg)\n  }\n\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    this.length = 0\n    this.parent = undefined\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    return fromNumber(this, arg)\n  }\n\n  // Slightly less common case.\n  if (typeof arg === 'string') {\n    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')\n  }\n\n  // Unusual.\n  return fromObject(this, arg)\n}\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction fromNumber (that, length) {\n  that = allocate(that, length < 0 ? 0 : checked(length) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < length; i++) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'\n\n  // Assumption: byteLength() return value is always < kMaxLength.\n  var length = byteLength(string, encoding) | 0\n  that = allocate(that, length)\n\n  that.write(string, encoding)\n  return that\n}\n\nfunction fromObject (that, object) {\n  if (Buffer.isBuffer(object)) return fromBuffer(that, object)\n\n  if (isArray(object)) return fromArray(that, object)\n\n  if (object == null) {\n    throw new TypeError('must start with number, buffer, array or string')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined') {\n    if (object.buffer instanceof ArrayBuffer) {\n      return fromTypedArray(that, object)\n    }\n    if (object instanceof ArrayBuffer) {\n      return fromArrayBuffer(that, object)\n    }\n  }\n\n  if (object.length) return fromArrayLike(that, object)\n\n  return fromJsonObject(that, object)\n}\n\nfunction fromBuffer (that, buffer) {\n  var length = checked(buffer.length) | 0\n  that = allocate(that, length)\n  buffer.copy(that, 0, 0, length)\n  return that\n}\n\nfunction fromArray (that, array) {\n  var length = checked(array.length) | 0\n  that = allocate(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\n// Duplicate of fromArray() to keep fromArray() monomorphic.\nfunction fromTypedArray (that, array) {\n  var length = checked(array.length) | 0\n  that = allocate(that, length)\n  // Truncating the elements is probably not what people expect from typed\n  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior\n  // of the old Buffer constructor.\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(array)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromTypedArray(that, new Uint8Array(array))\n  }\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = checked(array.length) | 0\n  that = allocate(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\n// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.\n// Returns a zero-length buffer for inputs that don't conform to the spec.\nfunction fromJsonObject (that, object) {\n  var array\n  var length = 0\n\n  if (object.type === 'Buffer' && isArray(object.data)) {\n    array = object.data\n    length = checked(array.length) | 0\n  }\n  that = allocate(that, length)\n\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n} else {\n  // pre-set for values that may exist in the future\n  Buffer.prototype.length = undefined\n  Buffer.prototype.parent = undefined\n}\n\nfunction allocate (that, length) {\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that.length = length\n  }\n\n  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1\n  if (fromPool) that.parent = rootParent\n\n  return that\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (subject, encoding) {\n  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)\n\n  var buf = new Buffer(subject, encoding)\n  delete buf.parent\n  return buf\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  var i = 0\n  var len = Math.min(x, y)\n  while (i < len) {\n    if (a[i] !== b[i]) break\n\n    ++i\n  }\n\n  if (i !== len) {\n    x = a[i]\n    y = b[i]\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'binary':\n    case 'base64':\n    case 'raw':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')\n\n  if (list.length === 0) {\n    return new Buffer(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; i++) {\n      length += list[i].length\n    }\n  }\n\n  var buf = new Buffer(length)\n  var pos = 0\n  for (i = 0; i < list.length; i++) {\n    var item = list[i]\n    item.copy(buf, pos)\n    pos += item.length\n  }\n  return buf\n}\n\nfunction byteLength (string, encoding) {\n  if (typeof string !== 'string') string = '' + string\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'binary':\n      // Deprecated\n      case 'raw':\n      case 'raws':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  start = start | 0\n  end = end === undefined || end === Infinity ? this.length : end | 0\n\n  if (!encoding) encoding = 'utf8'\n  if (start < 0) start = 0\n  if (end > this.length) end = this.length\n  if (end <= start) return ''\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'binary':\n        return binarySlice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return 0\n  return Buffer.compare(this, b)\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset) {\n  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff\n  else if (byteOffset < -0x80000000) byteOffset = -0x80000000\n  byteOffset >>= 0\n\n  if (this.length === 0) return -1\n  if (byteOffset >= this.length) return -1\n\n  // Negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)\n\n  if (typeof val === 'string') {\n    if (val.length === 0) return -1 // special case: looking for empty string always fails\n    return String.prototype.indexOf.call(this, val, byteOffset)\n  }\n  if (Buffer.isBuffer(val)) {\n    return arrayIndexOf(this, val, byteOffset)\n  }\n  if (typeof val === 'number') {\n    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {\n      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)\n    }\n    return arrayIndexOf(this, [ val ], byteOffset)\n  }\n\n  function arrayIndexOf (arr, val, byteOffset) {\n    var foundIndex = -1\n    for (var i = 0; byteOffset + i < arr.length; i++) {\n      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex\n      } else {\n        foundIndex = -1\n      }\n    }\n    return -1\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new Error('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; i++) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) throw new Error('Invalid hex string')\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction binaryWrite (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    var swap = encoding\n    encoding = offset\n    offset = length | 0\n    length = swap\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'binary':\n        return binaryWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; i++) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction binarySlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; i++) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; i++) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; i++) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  if (newBuf.length) newBuf.parent = this.parent || this\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('value is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = value < 0 ? 1 : 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = value < 0 ? 1 : 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('index out of range')\n  if (offset < 0) throw new RangeError('index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; i--) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; i++) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// fill(value, start=0, end=buffer.length)\nBuffer.prototype.fill = function fill (value, start, end) {\n  if (!value) value = 0\n  if (!start) start = 0\n  if (!end) end = this.length\n\n  if (end < start) throw new RangeError('end < start')\n\n  // Fill 0 bytes; we're done\n  if (end === start) return\n  if (this.length === 0) return\n\n  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')\n  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')\n\n  var i\n  if (typeof value === 'number') {\n    for (i = start; i < end; i++) {\n      this[i] = value\n    }\n  } else {\n    var bytes = utf8ToBytes(value.toString())\n    var len = bytes.length\n    for (i = start; i < end; i++) {\n      this[i] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; i++) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; i++) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; i++) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; i++) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"base64-js\":3,\"ieee754\":4,\"isarray\":5}],3:[function(require,module,exports){\n'use strict'\n\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nfunction init () {\n  var i\n  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\n  var len = code.length\n\n  for (i = 0; i < len; i++) {\n    lookup[i] = code[i]\n  }\n\n  for (i = 0; i < len; ++i) {\n    revLookup[code.charCodeAt(i)] = i\n  }\n  revLookup['-'.charCodeAt(0)] = 62\n  revLookup['_'.charCodeAt(0)] = 63\n}\n\ninit()\n\nfunction toByteArray (b64) {\n  var i, j, l, tmp, placeHolders, arr\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // the number of equal signs (place holders)\n  // if there are two placeholders, than the two characters before it\n  // represent one byte\n  // if there is only one, then the three characters before it represent 2 bytes\n  // this is just a cheap hack to not do indexOf twice\n  placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0\n\n  // base64 is 4/3 + up to two characters of the original data\n  arr = new Arr(len * 3 / 4 - placeHolders)\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  l = placeHolders > 0 ? len - 4 : len\n\n  var L = 0\n\n  for (i = 0, j = 0; i < l; i += 4, j += 3) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]\n    arr[L++] = (tmp & 0xFF0000) >> 16\n    arr[L++] = (tmp & 0xFF00) >> 8\n    arr[L++] = tmp & 0xFF\n  }\n\n  if (placeHolders === 2) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[L++] = tmp & 0xFF\n  } else if (placeHolders === 1) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var output = ''\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    output += lookup[tmp >> 2]\n    output += lookup[(tmp << 4) & 0x3F]\n    output += '=='\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])\n    output += lookup[tmp >> 10]\n    output += lookup[(tmp >> 4) & 0x3F]\n    output += lookup[(tmp << 2) & 0x3F]\n    output += '='\n  }\n\n  parts.push(output)\n\n  return parts.join('')\n}\n\n},{}],4:[function(require,module,exports){\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n},{}],5:[function(require,module,exports){\nvar toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n},{}],6:[function(require,module,exports){\n// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = setTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    clearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}]},{},[1])(1)\n});\n\n","/*global process, Buffer */\n/**\n * @file Manages Salesforce Metadata API\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\n */\n\n'use strict';\n\nvar inherits = window.jsforce.require('inherits'),\n    events  = window.jsforce.require('events'),\n    stream  = window.jsforce.require('readable-stream'),\n    _       = window.jsforce.require('lodash/core'),\n    jsforce = window.jsforce.require('./core'),\n    Promise = window.jsforce.require('./promise'),\n    SOAP    = window.jsforce.require('./soap');\n\n/*--------------------------------------------*/\n/**\n * Class for Salesforce Metadata API\n *\n * @class\n * @param {Connection} conn - Connection object\n */\nvar Metadata = module.exports = function(conn) {\n  this._conn = conn;\n};\n\n\n/**\n * Polling interval in milliseconds\n * @type {Number}\n */\nMetadata.prototype.pollInterval = 1000;\n\n/**\n * Polling timeout in milliseconds\n * @type {Number}\n */\nMetadata.prototype.pollTimeout = 10000;\n\n\n/**\n * Call Metadata API SOAP endpoint\n *\n * @private\n */\nMetadata.prototype._invoke = function(method, message, callback) {\n  var soapEndpoint = new SOAP(this._conn, {\n    xmlns: \"http://soap.sforce.com/2006/04/metadata\",\n    endpointUrl: this._conn.instanceUrl + \"/services/Soap/m/\" + this._conn.version\n  });\n  return soapEndpoint.invoke(method, message).then(function(res) {\n    return res.result;\n  }).thenCall(callback);\n};\n\n\n/**\n * @typedef {Object} Metadata~MetadataInfo\n * @prop {String} fullName - The name of the component\n */\n\n/**\n * Asynchronously adds one or more new metadata components to the organization.\n *\n * @param {String} type - The type of metadata to create\n * @param {Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>} metadata - Metadata to create\n * @param {Callback.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} [callback] - Callback function\n * @returns {Metadata~AsyncResultLocator}\n */\nMetadata.prototype.createAsync = function(type, metadata, callback) {\n  if (Number(this._conn.version) > 30) {\n    throw new Error(\"Async metadata CRUD calls are not supported on ver 31.0 or later.\");\n  }\n  var convert = function(md) {\n    md[\"@xsi:type\"] = type;\n    return md;\n  };\n  var isArray = _.isArray(metadata);\n  metadata = isArray ? _.map(metadata, convert) : convert(metadata);\n  var res = this._invoke(\"create\", { metadata: metadata });\n  return new AsyncResultLocator(this, res, isArray).thenCall(callback);\n};\n\n/**\n * @typedef {Object} Metadata~SaveResult\n * @prop {Boolean} success - True if metadata is successfully saved\n * @prop {String} fullName - Full name of metadata object\n */\n\n/**\n * @private\n */\nfunction convertToSaveResult(result) {\n  var saveResult = _.clone(result);\n  saveResult.success = saveResult.success === 'true';\n  return saveResult;\n}\n\n/**\n * @typedef {Object} Metadata~UpsertResult\n * @prop {Boolean} success - True if metadata is successfully saved\n * @prop {String} fullName - Full name of metadata object\n * @prop {Boolean} created - True if metadata is newly created\n */\n\n/**\n * @private\n */\nfunction convertToUpsertResult(result) {\n  var upsertResult = convertToSaveResult(result);\n  upsertResult.created = upsertResult.created === 'true';\n  return upsertResult;\n}\n\n/**\n * Synonym of Metadata#create().\n *\n * @method Metadata#createSync\n * @param {String} type - The type of metadata to create\n * @param {Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>} metadata - Metadata to create\n * @param {Callback.<Metadata~SaveResult|Array.<Metadata~SaveResult>>} [callback] - Callback function\n * @returns {Promise.<Metadata~SaveResult|Array.<Metadata~SaveResult>>}\n */\n/**\n * Synchronously adds one or more new metadata components to the organization.\n *\n * @method Metadata#create\n * @param {String} type - The type of metadata to create\n * @param {Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>} metadata - Metadata to create\n * @param {Callback.<Metadata~SaveResult|Array.<Metadata~SaveResult>>} [callback] - Callback function\n * @returns {Promise.<Metadata~SaveResult|Array.<Metadata~SaveResult>>}\n */\nMetadata.prototype.createSync =\nMetadata.prototype.create = function(type, metadata, callback) {\n  var convert = function(md) {\n    md[\"@xsi:type\"] = type;\n    return md;\n  };\n  var isArray = _.isArray(metadata);\n  metadata = isArray ? _.map(metadata, convert) : convert(metadata);\n  return this._invoke(\"createMetadata\", { metadata: metadata }).then(function(results) {\n    return _.isArray(results) ? _.map(results, convertToSaveResult) : convertToSaveResult(results);\n  }).thenCall(callback);\n};\n\n/**\n * @private\n */\nfunction convertToMetadataInfo(rec) {\n  var metadataInfo = _.clone(rec);\n  delete metadataInfo.$;\n  return metadataInfo;\n}\n\n/**\n * Synonym of Metadata#read()\n *\n * @method Metadata#readSync\n * @param {String} type - The type of metadata to read\n * @param {String|Array.<String>} fullNames - full name(s) of metadata objects to read\n * @param {Callback.<Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>>} [callback] - Callback function\n * @returns {Promise.<Array.<Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>>>}\n */\n/**\n * Synchronously read specified metadata components in the organization.\n *\n * @method Metadata#read\n * @param {String} type - The type of metadata to read\n * @param {String|Array.<String>} fullNames - full name(s) of metadata objects to read\n * @param {Callback.<Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>>} [callback] - Callback function\n * @returns {Promise.<Array.<Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>>>}\n */\nMetadata.prototype.readSync =\nMetadata.prototype.read = function(type, fullNames, callback) {\n  return this._invoke(\"readMetadata\", { type: type, fullNames: fullNames }).then(function(res) {\n    return _.isArray(res.records) ? _.map(res.records, convertToMetadataInfo) : convertToMetadataInfo(res.records);\n  }).thenCall(callback);\n};\n\n/**\n * @typedef {Object} Metadata~UpdateMetadataInfo\n * @prop {String} currentName - The API name of the component or field before the update\n * @prop {Metadata~MetadataInfo} metadata - Full specification of the component or field you wish to update\n */\n\n/**\n * Asynchronously updates one or more metadata components in the organization.\n *\n * @param {String} type - The type of metadata to update\n * @param {Metadata~UpdateMetadataInfo|Array.<Metadata~UpdateMetadataInfo>} updateMetadata - Updating metadata\n * @param {Callback.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} [callback] - Callback function\n * @returns {Metadata~AsyncResultLocator}\n */\nMetadata.prototype.updateAsync = function(type, updateMetadata, callback) {\n  if (Number(this._conn.version) > 30) {\n    throw new Error(\"Async metadata CRUD calls are not supported on ver 31.0 or later.\");\n  }\n  var convert = function(umd) {\n    umd.metadata[\"@xsi:type\"] = type;\n    return umd;\n  };\n  var isArray = _.isArray(updateMetadata);\n  updateMetadata = isArray ? _.map(updateMetadata, convert) : convert(updateMetadata);\n  var res = this._invoke(\"update\", { updateMetadata: updateMetadata });\n  return new AsyncResultLocator(this, res, isArray).thenCall(callback);\n};\n\n/**\n * Synonym of Metadata#update().\n *\n * @method Metadata#updateSync\n * @param {String} type - The type of metadata to update\n * @param {Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>} updateMetadata - Updating metadata\n * @param {Callback.<Metadata~SaveResult|Array.<Metadata~SaveResult>>} [callback] - Callback function\n * @returns {Promise.<Metadata~SaveResult|Array.<Metadata~SaveResult>>}\n */\n/**\n * Synchronously updates one or more metadata components in the organization.\n *\n * @method Metadata#update\n * @param {String} type - The type of metadata to update\n * @param {Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>} updateMetadata - Updating metadata\n * @param {Callback.<Metadata~SaveResult|Array.<Metadata~SaveResult>>} [callback] - Callback function\n * @returns {Promise.<Metadata~SaveResult|Array.<Metadata~SaveResult>>}\n */\nMetadata.prototype.updateSync =\nMetadata.prototype.update = function(type, metadata, callback) {\n  var convert = function(md) {\n    md[\"@xsi:type\"] = type;\n    return md;\n  };\n  var isArray = _.isArray(metadata);\n  metadata = isArray ? _.map(metadata, convert) : convert(metadata);\n  return this._invoke(\"updateMetadata\", { metadata: metadata }).then(function(results) {\n    return _.isArray(results) ? _.map(results, convertToSaveResult) : convertToSaveResult(results);\n  }).thenCall(callback);\n};\n\n/**\n * Upserts one or more components in your organization's data.\n *\n * @param {String} type - The type of metadata to upsert\n * @param {Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>} metadata - Upserting metadata\n * @param {Callback.<Metadata~UpsertResult|Array.<Metadata~UpsertResult>>} [callback] - Callback function\n * @returns {Promise.<Metadata~UpsertResult|Array.<Metadata~UpsertResult>>}\n */\nMetadata.prototype.upsertSync =\nMetadata.prototype.upsert = function(type, metadata, callback) {\n  var convert = function(md) {\n    md[\"@xsi:type\"] = type;\n    return md;\n  };\n  var isArray = _.isArray(metadata);\n  metadata = isArray ? _.map(metadata, convert) : convert(metadata);\n  return this._invoke(\"upsertMetadata\", { metadata: metadata }).then(function(results) {\n    return _.isArray(results) ? _.map(results, convertToUpsertResult) : convertToUpsertResult(results);\n  }).thenCall(callback);\n};\n\n/**\n * Asynchronously deletes specified metadata components in the organization.\n *\n * @param {String} type - The type of metadata to delete\n * @param {String|Metadata~MetadataInfo|Array.<String>|Array.<Metadata~MetadataInfo>} metadata - The fullName of metadata or metadata info to delete. If it is passed in fullName, the type parameter should not be empty.\n * @param {Callback.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} [callback] - Callback function\n * @returns {Metadata~AsyncResultLocator}\n */\nMetadata.prototype.deleteAsync = function(type, metadata, callback) {\n  if (Number(this._conn.version) > 30) {\n    throw new Error(\"Async metadata CRUD calls are not supported on ver 31.0 or later.\");\n  }\n  var convert = function(md) {\n    if (_.isString(md)) {\n      md = { fullName : md };\n    }\n    md[\"@xsi:type\"] = type;\n    return md;\n  };\n  var isArray = _.isArray(metadata);\n  metadata = isArray ? _.map(metadata, convert) : convert(metadata);\n  var res = this._invoke(\"delete\", { metadata: metadata });\n  return new AsyncResultLocator(this, res, isArray).thenCall(callback);\n};\n\n/**\n * Synonym of Metadata#delete().\n *\n * @deprecated\n * @method Metadata#del\n * @param {String} [type] - The type of metadata to delete\n * @param {String|Metadata~MetadataInfo|Array.<String>|Array.<Metadata~MetadataInfo>} metadata - The fullName of metadata or metadata info to delete. If it is passed in fullName, the type parameter should not be empty.\n * @param {Callback.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} [callback] - Callback function\n * @returns {Metadata~AsyncResultLocator}\n */\n/**\n * Synonym of Metadata#delete().\n *\n * @method Metadata#deleteSync\n * @param {String} type - The type of metadata to delete\n * @param {String|Array.<String>} fullNames - The fullName of metadata to delete.\n * @param {Callback.<Metadata~SaveResult|Array.<Metadata~SaveResult>>} [callback] - Callback function\n * @returns {Promise.<Metadata~SaveResult|Array.<Metadata~SaveResult>>}\n */\n\n/**\n * Synchronously deletes specified metadata components in the organization.\n *\n * @method Metadata#delete\n * @param {String} type - The type of metadata to delete\n * @param {String|Array.<String>} fullNames - The fullName of metadata to delete.\n * @param {Callback.<Metadata~SaveResult|Array.<Metadata~SaveResult>>} [callback] - Callback function\n * @returns {Promise.<Metadata~SaveResult|Array.<Metadata~SaveResult>>}\n */\nMetadata.prototype.del =\nMetadata.prototype.deleteSync =\nMetadata.prototype[\"delete\"] = function(type, fullNames, callback) {\n  return this._invoke(\"deleteMetadata\", { type: type, fullNames: fullNames }).then(function(results) {\n    return _.isArray(results) ? _.map(results, convertToSaveResult) : convertToSaveResult(results);\n  }).thenCall(callback);\n};\n\n/**\n * Rename fullname of a metadata component in the organization\n *\n * @param {String} type - The type of metadata to delete\n * @param {String} oldFullName - The original fullName of metadata\n * @param {String} newFullName - The new fullName of metadata\n * @param {Callback.<Metadata~SaveResult>} [callback] - Callback function\n * @returns {Promise.<Metadata~SaveResult>}\n */\nMetadata.prototype.rename = function(type, oldFullName, newFullName, callback) {\n  return this._invoke(\"renameMetadata\", { type: type, oldFullName: oldFullName, newFullName: newFullName }).then(function(result) {\n    return convertToSaveResult(result);\n  }).thenCall(callback);\n};\n\n/**\n * Checks the status of asynchronous metadata calls\n *\n * @param {String|Array.<String>} ids - The asynchronous process ID(s)\n * @param {Callback.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} [callback] - Callback function\n * @returns {Metadata~AsyncResultLocator}\n */\nMetadata.prototype.checkStatus = function(ids, callback) {\n  var isArray = _.isArray(ids);\n  var res = this._invoke(\"checkStatus\", { asyncProcessId: ids });\n  return new AsyncResultLocator(this, res, isArray).thenCall(callback);\n};\n\n/**\n * @typedef {Object} Metadata~DescribeMetadataResult\n * @prop {Array.<Object>} metadataObjects - One or more metadata components and their attributes\n * @prop {Array.<String>} metadataObjects.childXmlNames - List of child sub-components for this component\n * @prop {String} metadataObjects.directoryName - The name of the directory in the .zip file that contains this component\n * @prop {Boolean} metadataObjects.inFolder - Indicates whether the component is in a folder or not\n * @prop {Boolean} metadataObjects.metaFile - Indicates whether the component requires an accompanying metadata file\n * @prop {String} metadataObjects.suffix - The file suffix for this component\n * @prop {String} metadataObjects.xmlName - The name of the root element in the metadata file for this component\n * @prop {String} organizationNamespace - The namespace of the organization\n * @prop {Boolean} partialSaveAllowed - Indicates whether rollbackOnError is allowed or not\n * @prop {Boolean} testRequired - Indicates whether tests are required or not\n */\n\n/**\n * Retrieves the metadata which describes your organization, including Apex classes and triggers,\n * custom objects, custom fields on standard objects, tab sets that define an app,\n * and many other components.\n *\n * @param {String} [version] - The API version for which you want metadata; for example, 29.0\n * @param {Callback.<Metadata~DescribeMetadataResult>} [callback] - Callback function\n * @returns {Promise.<Metadata~DescribeMetadataResult>}\n */\nMetadata.prototype.describe = function(version, callback) {\n  if (!_.isString(version)) {\n    callback = version;\n    version = this._conn.version;\n  }\n  return this._invoke(\"describeMetadata\", { asOfVersion: version }).then(function(res) {\n    res.metadataObjects = _.isArray(res.metadataObjects) ? res.metadataObjects : [ res.metadataObjects ];\n    res.metadataObjects = _.map(res.metadataObjects, function(mo) {\n      if (mo.childXmlNames) {\n        mo.childXmlNames = _.isArray(mo.childXmlNames) ? mo.childXmlNames: [ mo.childXmlNames ];\n      }\n      mo.inFolder = mo.inFolder === 'true';\n      mo.metaFile = mo.metaFile === 'true';\n      return mo;\n    });\n    res.partialSaveAllowed = res.partialSaveAllowed === 'true';\n    res.testRequired = res.testRequired === 'true';\n    return res;\n  }).thenCall(callback);\n};\n\n/**\n * @typedef {Object} Metadata~ListMetadataQuery\n * @prop {String} type - The metadata type, such as CustomObject, CustomField, or ApexClass\n * @prop {String} [folder] - The folder associated with the component.\n */\n\n/**\n * @typedef {Object} Metadata~FileProperties\n * @prop {String} type - The metadata type, such as CustomObject, CustomField, or ApexClass\n * @prop {String} createdById - ID of the user who created the file\n * @prop {String} createdByName - Name of the user who created the file\n * @prop {String} createdDate - Date and time when the file was created\n * @prop {String} fileName - Name of the file\n * @prop {String} fullName - The file developer name used as a unique identifier for API access\n * @prop {String} id - ID of the file\n * @prop {String} lastModifiedById - ID of the user who last modified the file\n * @prop {String} lastModifiedByName - Name of the user who last modified the file\n * @prop {String} lastModifiedDate - Date and time that the file was last modified\n * @prop {String} [manageableState] - Indicates the manageable state of the specified component if it is contained in a package\n * @prop {String} [namespacePrefix] - The namespace prefix of the component\n */\n\n/**\n * Retrieves property information about metadata components in your organization\n *\n * @param {Metadata~ListMetadataQuery|Array.<Metadata~ListMetadataQuery>} queries - The criteria object(s) specifing metadata to list\n * @param {String} [version] - The API version for which you want metadata; for example, 29.0\n * @param {Callback.<Array.<Metadata~FileProperties>>} [callback] - Callback function\n * @returns {Promise.<Array.<Metadata~FileProperties>>}\n */\nMetadata.prototype.list = function(queries, version, callback) {\n  if (!_.isString(version)) {\n    callback = version;\n    version = this._conn.version;\n  }\n  if (!_.isArray(queries)) {\n    queries = [ queries ];\n  }\n  return this._invoke(\"listMetadata\", { queries: queries, asOfVersion: version }, callback);\n};\n\n/**\n * @typedef {Object} Metadata~RetrieveRequest\n */\n\n/**\n * Retrieves XML file representations of components in an organization\n *\n * @param {Metadata~RetrieveRequest} request - Options for determining which packages or files are retrieved\n * @param {Callback.<Metadata~AsyncResult>} [callback] - Callback function\n * @returns {Metadata~RetrieveResultLocator}\n */\nMetadata.prototype.retrieve = function(request, callback) {\n  var res = this._invoke(\"retrieve\", { request: request });\n  return new RetrieveResultLocator(this, res).thenCall(callback);\n};\n\n/**\n * Checks the status of declarative metadata call retrieve() and returns the zip file contents\n *\n * @param {String} id - Async process id returned from previous retrieve request\n * @param {Callback.<Metadata~RetrieveResult>} [callback] - Callback function\n * @returns {Promise.<Metadata~RetrieveResult>}\n */\nMetadata.prototype.checkRetrieveStatus = function(id, callback) {\n  return this._invoke(\"checkRetrieveStatus\", { asyncProcessId: id }, callback);\n};\n\n/**\n * Deploy components into an organization using zipped file representations\n *\n * @param {stream.Stream|Buffer|String} zipInput - Zipped file input source in readable stream, binary buffer or Base64-encoded string\n * @param {Object} [options] - Options used in deployment\n * @param {Boolean} [options.allowMissingFiles] - Specifies whether a deploy succeeds even if files that are specified in package.xml but are not in the .zip file or not.\n * @param {Boolean} [options.autoUpdatePackage] - If a file is in the .zip file but not specified in package.xml, specifies whether the file should be automatically added to the package or not.\n * @param {Boolean} [options.checkOnly] - Indicates whether Apex classes and triggers are saved to the organization as part of the deployment (false) or not (true).\n * @param {Boolean} [options.ignoreWarnings] - Indicates whether a warning should allow a deployment to complete successfully (true) or not (false). Defaults to false.\n * @param {Boolean} [options.performRetrieve] - Indicates whether a retrieve() call is performed immediately after the deployment (true) or not (false).\n * @param {Boolean} [options.purgeOnDelete] - If true, the deleted components in the destructiveChanges.xml manifest file aren't stored in the Recycle Bin.\n * @param {Boolean} [options.rollbackOnError] - Indicates whether any failure causes a complete rollback (true) or not (false).\n * @param {Boolean} [options.runAllTests] - If true, all Apex tests defined in the organization are run.\n * @param {Array.<String>} [options.runTests] - A list of Apex tests to be run during deployment.\n * @param {Boolean} [options.singlePackage] - Indicates whether the specified .zip file points to a directory structure with a single package (true) or a set of packages (false).\n * @param {Callback.<Metadata~AsyncResult>} [callback] - Callback function\n * @returns {Metadata~DeployResultLocator}\n */\nMetadata.prototype.deploy = function(zipInput, options, callback) {\n  if (!options || _.isFunction(options)) {\n    callback = options;\n    options = {};\n  }\n  var deferred = Promise.defer();\n  if (_.isObject(zipInput) && _.isFunction(zipInput.pipe)) {\n    var bufs = [];\n    zipInput.on('data', function(d) {\n      bufs.push(d);\n    });\n    zipInput.on('end', function() {\n      deferred.resolve(Buffer.concat(bufs).toString('base64'));\n    });\n    // zipInput.resume();\n  } else if (zipInput instanceof Buffer) {\n    deferred.resolve(zipInput.toString('base64'));\n  } else if (zipInput instanceof String || typeof zipInput === 'string') {\n    deferred.resolve(zipInput);\n  } else {\n    throw \"Unexpected zipInput type\";\n  }\n\n  var self = this;\n  var res = deferred.promise.then(function(zipContentB64) {\n    return self._invoke(\"deploy\", {\n      ZipFile: zipContentB64,\n      DeployOptions: options\n    }, callback);\n  });\n  return new DeployResultLocator(this, res).thenCall(callback);\n};\n\n/**\n * Checks the status of declarative metadata call deploy()\n *\n * @param {String} id - Async process id returned from previous deploy request\n * @param {Boolean} [includeDetails] - Sets the DeployResult object to include details information (default: false)\n * @param {Callback.<Metadata~DeployResult>} [callback] - Callback function\n * @returns {Promise.<Metadata~DeployResult>}\n */\nMetadata.prototype.checkDeployStatus = function(id, includeDetails, callback) {\n  if (_.isObject(includeDetails) || _.isBoolean(includeDetails)) {\n    includeDetails = !!includeDetails;\n  } else {\n    callback = includeDetails;\n    includeDetails = false;\n  }\n  return this._invoke(\"checkDeployStatus\", {\n    asyncProcessId: id,\n    includeDetails : includeDetails\n  }).then(function(res) {\n    res.done = res.done === 'true';\n    res.success = res.success === 'true';\n    res.checkOnly = res.checkOnly === 'true';\n    if (res.ignoreWarnings) {\n      res.ignoreWarnings = res.ignoreWarnings === 'true';\n    }\n    if (res.rollbackOnError) {\n      res.rollbackOnError = res.rollbackOnError === 'true';\n    }\n    res.numberComponentErrors = Number(res.numberComponentErrors);\n    res.numberComponentsDeployed = Number(res.numberComponentsDeployed);\n    res.numberComponentsTotal = Number(res.numberComponentsTotal);\n    res.numberTestErrors = Number(res.numberTestErrors);\n    res.numberTestsCompleted = Number(res.numberTestsCompleted);\n    res.numberTestsTotal = Number(res.numberTestsTotal);\n\n    return res;\n  }).thenCall(callback);\n};\n\n\n/*--------------------------------------------*/\n\n/**\n * @typedef {Object} Metadata~AsyncResult\n * @prop {Boolean} done - Indicates whether the call has completed or not\n * @prop {String} id - ID of the component being created, updated, deleted, deployed, or retrieved\n * @prop {String} state - The state four possible values: Queued, InProgress, Completed, and Error.\n * @prop {String} [statusCode] - If an error occurred during the create(), update(), or delete() call, a status code is returned\n * @prop {String} [message] - Message corresponding to the statusCode field returned\n */\n\n/**\n * The locator class for Metadata API asynchronous call result\n *\n * @protected\n * @class Metadata~AsyncResultLocator\n * @extends events.EventEmitter\n * @implements Promise.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>\n * @param {Metadata} meta - Metadata API object\n * @param {Promise.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} results - Promise object for async result info\n * @param {Boolean} [isArray] - Indicates whether the async request is given in array or single object\n */\nvar AsyncResultLocator = function(meta, results, isArray) {\n  this._meta = meta;\n  this._results = results;\n  this._isArray = isArray;\n};\n\ninherits(AsyncResultLocator, events.EventEmitter);\n\n/**\n * Promise/A+ interface\n * http://promises-aplus.github.io/promises-spec/\n *\n * Delegate to deferred promise, return promise instance for batch result\n *\n * @method Metadata~AsyncResultLocator#then\n */\nAsyncResultLocator.prototype.then = function(onResolve, onReject) {\n  var self = this;\n  return this._results.then(function(results) {\n    var convertType = function(res) {\n      if (res.$ && res.$[\"xsi:nil\"] === 'true') {\n        return null;\n      }\n      res.done = res.done === 'true';\n      return res;\n    };\n    results = _.isArray(results) ? _.map(results, convertType) : convertType(results);\n    if (self._isArray && !_.isArray(results)) {\n      results = [ results ];\n    }\n    return onResolve(results);\n  }, onReject);\n};\n\n/**\n * Promise/A+ extension\n * Call \"then\" using given node-style callback function\n *\n * @method Metadata~AsyncResultLocator#thenCall\n */\nAsyncResultLocator.prototype.thenCall = function(callback) {\n  return _.isFunction(callback) ? this.then(function(res) {\n    process.nextTick(function() {\n      callback(null, res);\n    });\n  }, function(err) {\n    process.nextTick(function() {\n      callback(err);\n    });\n  }) : this;\n};\n\n/**\n * Check the status of async request\n *\n * @method Metadata~AsyncResultLocator#check\n * @param {Callback.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} [callback] - Callback function\n * @returns {Promise.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>}\n */\nAsyncResultLocator.prototype.check = function(callback) {\n  var self = this;\n  var meta = this._meta;\n  return this.then(function(results) {\n    var ids = _.isArray(results) ? _.map(results, function(res){ return res.id; }) : results.id;\n    self._ids = ids;\n    return meta.checkStatus(ids);\n  }).thenCall(callback);\n};\n\n/**\n * Polling until async call status becomes complete or error\n *\n * @method Metadata~AsyncResultLocator#poll\n * @param {Number} interval - Polling interval in milliseconds\n * @param {Number} timeout - Polling timeout in milliseconds\n */\nAsyncResultLocator.prototype.poll = function(interval, timeout) {\n  var self = this;\n  var startTime = new Date().getTime();\n  var poll = function() {\n    var now = new Date().getTime();\n    if (startTime + timeout < now) {\n      var errMsg = \"Polling time out.\";\n      if (self._ids) {\n        errMsg += \" Process Id = \" + self._ids;\n      }\n      self.emit('error', new Error(errMsg));\n      return;\n    }\n    self.check().then(function(results) {\n      var done = true;\n      var resultArr = _.isArray(results) ? results : [ results ];\n      for (var i=0, len=resultArr.length; i<len; i++) {\n        var result = resultArr[i];\n        if (result && !result.done) {\n          self.emit('progress', result);\n          done = false;\n        }\n      }\n      if (done) {\n        self.emit('complete', results);\n      } else {\n        setTimeout(poll, interval);\n      }\n    }, function(err) {\n      self.emit('error', err);\n    });\n  };\n  setTimeout(poll, interval);\n};\n\n/**\n * Check and wait until the async requests become in completed status\n *\n * @method Metadata~AsyncResultLocator#complete\n * @param {Callback.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} [callback] - Callback function\n * @returns {Promise.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>}\n */\nAsyncResultLocator.prototype.complete = function(callback) {\n  var deferred = Promise.defer();\n  this.on('complete', function(results) {\n    deferred.resolve(results);\n  });\n  this.on('error', function(err) {\n    deferred.reject(err);\n  });\n  var meta = this._meta;\n  this.poll(meta.pollInterval, meta.pollTimeout);\n  return deferred.promise.thenCall(callback);\n};\n\n/*--------------------------------------------*/\n/**\n * The locator class to track retreive() Metadata API call result\n *\n * @protected\n * @class Metadata~RetrieveResultLocator\n * @extends Metadata~AsyncResultLocator\n * @param {Metadata} meta - Metadata API object\n * @param {Promise.<Metadata~AsyncResult>} result - Promise object for async result of retrieve call()\n */\nvar RetrieveResultLocator = function(meta, result) {\n  RetrieveResultLocator.super_.call(this, meta, result);\n};\n\ninherits(RetrieveResultLocator, AsyncResultLocator);\n\n/**\n * @typedef {Object} Metadata~RetrieveResult\n * @prop {Array.<Metadata~FileProperties>} fileProperties - Contains information about the properties of each component in the .zip file, and the manifest file package.xml\n * @prop {String} id - ID of the component being retrieved\n * @prop {Array.<Object>} messages - Contains information about the success or failure of the retrieve() call\n * @prop {String} zipFile - The zip file returned by the retrieve request. Base 64-encoded binary data\n */\n\n/**\n * Check and wait until the async request becomes in completed status,\n * and retrieve the result data.\n *\n * @memthod Metadata~RetrieveResultLocator#complete\n * @param {Callback.<Metadata~RetrieveResult>} [callback] - Callback function\n * @returns {Promise.<Metadata~RetrieveResult>}\n */\nRetrieveResultLocator.prototype.complete = function(callback) {\n  var meta = this._meta;\n  return RetrieveResultLocator.super_.prototype.complete.call(this).then(function(result) {\n    return meta.checkRetrieveStatus(result.id);\n  }).thenCall(callback);\n};\n\n/**\n * Change the retrieved result to Node.js readable stream\n *\n * @method Metadata~RetrieveResultLocator#stream\n * @returns {stream.Readable}\n */\nRetrieveResultLocator.prototype.stream = function() {\n  var self = this;\n  var resultStream = new stream.Readable();\n  var reading = false;\n  resultStream._read = function() {\n    if (reading) { return; }\n    reading = true;\n    self.complete(function(err, result) {\n      if (err) {\n        resultStream.emit('error', err);\n      } else {\n        resultStream.push(new Buffer(result.zipFile, 'base64'));\n        resultStream.push(null);\n      }\n    });\n  };\n  return resultStream;\n};\n\n/*--------------------------------------------*/\n/**\n * The locator class to track deploy() Metadata API call result\n *\n * @protected\n * @class Metadata~DeployResultLocator\n * @extends Metadata~AsyncResultLocator\n * @param {Metadata} meta - Metadata API object\n * @param {Promise.<Metadata~AsyncResult>} result - Promise object for async result of deploy() call\n */\nvar DeployResultLocator = function(meta, result) {\n  DeployResultLocator.super_.call(this, meta, result);\n};\n\ninherits(DeployResultLocator, AsyncResultLocator);\n\n/**\n * @typedef {Object} Metadata~DeployResult\n * @prop {String} id - ID of the component being deployed\n * @prop {Boolean} checkOnly - Indicates whether this deployment is being used to check the validity of the deployed files without making any changes in the organization or not\n * @prop {String} completedDate - Timestamp for when the deployment process ended\n * @prop {String} createdDate - Timestamp for when the deploy() call was received\n * @prop {Array.<Object>} [details] - Provides the details of a deployment that is in-progress or ended, if includeDetails is set to true in checkDeployStatus() call\n * @prop {Boolean} done - Indicates whether the server finished processing the deploy() call for the specified id\n * @prop {String} [errorMessage] - Message corresponding to the values in the errorStatusCode field\n * @prop {String} [errorStatusCode] - If an error occurred during the deploy() call, a status code is returned, and the message corresponding to the status code is returned in the errorMessagefield\n * @prop {Boolean} [ignoreWarnings] - Specifies whether a deployment should continue even if the deployment generates warnings\n * @prop {String} lastModifiedDate - Timestamp of the last update for the deployment process\n * @prop {Number} numberComponentErrors - The number of components that generated errors during this deployment\n * @prop {Number} numberComponentsDeployed - The number of components deployed in the deployment process\n * @prop {Number} numberComponentsTotal - The total number of components in the deployment\n * @prop {Number} numberTestErrors - The number of Apex tests that have generated errors during this deployment\n * @prop {Number} numberTestsCompleted - The number of completedApex tests for this deployment\n * @prop {Number} numberTestsTotal - The total number of Apex tests for this deployment\n * @prop {Boolean} [rollbackOnError] - Indicates whether any failure causes a complete rollback or not. Default is true.\n * @prop {String} startDate - Timestamp for when the deployment process began\n * @prop {String} status - Indicates the current state of the deployment\n * @prop {Boolean} success - Indicates whether the deployment was successful or not\n */\n\n/**\n * Check and wait until the async request becomes in completed status,\n * and retrieve the result data.\n *\n * @method Metadata~DeployResultLocator#complete\n * @param {Callback.<Metadata~DeployResult>} [callback] - Callback function\n * @returns {Promise.<Metadata~DeployResult>}\n */\nDeployResultLocator.prototype.complete = function(includeDetails, callback) {\n  if (_.isFunction(includeDetails)) {\n    callback = includeDetails;\n    includeDetails = false;\n  }\n  var meta = this._meta;\n  return DeployResultLocator.super_.prototype.complete.call(this).then(function(result) {\n    return meta.checkDeployStatus(result.id, includeDetails);\n  }).thenCall(callback);\n};\n\n\n/*--------------------------------------------*/\n/*\n * Register hook in connection instantiation for dynamically adding this API module features\n */\njsforce.on('connection:new', function(conn) {\n  conn.metadata = new Metadata(conn);\n});\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\nBuffer.poolSize = 8192 // not used by this implementation\n\nvar rootParent = {}\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.foo = function () { return 42 }\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\nfunction Buffer (arg) {\n  if (!(this instanceof Buffer)) {\n    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.\n    if (arguments.length > 1) return new Buffer(arg, arguments[1])\n    return new Buffer(arg)\n  }\n\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    this.length = 0\n    this.parent = undefined\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    return fromNumber(this, arg)\n  }\n\n  // Slightly less common case.\n  if (typeof arg === 'string') {\n    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')\n  }\n\n  // Unusual.\n  return fromObject(this, arg)\n}\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction fromNumber (that, length) {\n  that = allocate(that, length < 0 ? 0 : checked(length) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < length; i++) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'\n\n  // Assumption: byteLength() return value is always < kMaxLength.\n  var length = byteLength(string, encoding) | 0\n  that = allocate(that, length)\n\n  that.write(string, encoding)\n  return that\n}\n\nfunction fromObject (that, object) {\n  if (Buffer.isBuffer(object)) return fromBuffer(that, object)\n\n  if (isArray(object)) return fromArray(that, object)\n\n  if (object == null) {\n    throw new TypeError('must start with number, buffer, array or string')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined') {\n    if (object.buffer instanceof ArrayBuffer) {\n      return fromTypedArray(that, object)\n    }\n    if (object instanceof ArrayBuffer) {\n      return fromArrayBuffer(that, object)\n    }\n  }\n\n  if (object.length) return fromArrayLike(that, object)\n\n  return fromJsonObject(that, object)\n}\n\nfunction fromBuffer (that, buffer) {\n  var length = checked(buffer.length) | 0\n  that = allocate(that, length)\n  buffer.copy(that, 0, 0, length)\n  return that\n}\n\nfunction fromArray (that, array) {\n  var length = checked(array.length) | 0\n  that = allocate(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\n// Duplicate of fromArray() to keep fromArray() monomorphic.\nfunction fromTypedArray (that, array) {\n  var length = checked(array.length) | 0\n  that = allocate(that, length)\n  // Truncating the elements is probably not what people expect from typed\n  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior\n  // of the old Buffer constructor.\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(array)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromTypedArray(that, new Uint8Array(array))\n  }\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = checked(array.length) | 0\n  that = allocate(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\n// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.\n// Returns a zero-length buffer for inputs that don't conform to the spec.\nfunction fromJsonObject (that, object) {\n  var array\n  var length = 0\n\n  if (object.type === 'Buffer' && isArray(object.data)) {\n    array = object.data\n    length = checked(array.length) | 0\n  }\n  that = allocate(that, length)\n\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n} else {\n  // pre-set for values that may exist in the future\n  Buffer.prototype.length = undefined\n  Buffer.prototype.parent = undefined\n}\n\nfunction allocate (that, length) {\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that.length = length\n  }\n\n  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1\n  if (fromPool) that.parent = rootParent\n\n  return that\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (subject, encoding) {\n  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)\n\n  var buf = new Buffer(subject, encoding)\n  delete buf.parent\n  return buf\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  var i = 0\n  var len = Math.min(x, y)\n  while (i < len) {\n    if (a[i] !== b[i]) break\n\n    ++i\n  }\n\n  if (i !== len) {\n    x = a[i]\n    y = b[i]\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'binary':\n    case 'base64':\n    case 'raw':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')\n\n  if (list.length === 0) {\n    return new Buffer(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; i++) {\n      length += list[i].length\n    }\n  }\n\n  var buf = new Buffer(length)\n  var pos = 0\n  for (i = 0; i < list.length; i++) {\n    var item = list[i]\n    item.copy(buf, pos)\n    pos += item.length\n  }\n  return buf\n}\n\nfunction byteLength (string, encoding) {\n  if (typeof string !== 'string') string = '' + string\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'binary':\n      // Deprecated\n      case 'raw':\n      case 'raws':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  start = start | 0\n  end = end === undefined || end === Infinity ? this.length : end | 0\n\n  if (!encoding) encoding = 'utf8'\n  if (start < 0) start = 0\n  if (end > this.length) end = this.length\n  if (end <= start) return ''\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'binary':\n        return binarySlice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return 0\n  return Buffer.compare(this, b)\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset) {\n  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff\n  else if (byteOffset < -0x80000000) byteOffset = -0x80000000\n  byteOffset >>= 0\n\n  if (this.length === 0) return -1\n  if (byteOffset >= this.length) return -1\n\n  // Negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)\n\n  if (typeof val === 'string') {\n    if (val.length === 0) return -1 // special case: looking for empty string always fails\n    return String.prototype.indexOf.call(this, val, byteOffset)\n  }\n  if (Buffer.isBuffer(val)) {\n    return arrayIndexOf(this, val, byteOffset)\n  }\n  if (typeof val === 'number') {\n    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {\n      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)\n    }\n    return arrayIndexOf(this, [ val ], byteOffset)\n  }\n\n  function arrayIndexOf (arr, val, byteOffset) {\n    var foundIndex = -1\n    for (var i = 0; byteOffset + i < arr.length; i++) {\n      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex\n      } else {\n        foundIndex = -1\n      }\n    }\n    return -1\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new Error('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; i++) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) throw new Error('Invalid hex string')\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction binaryWrite (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    var swap = encoding\n    encoding = offset\n    offset = length | 0\n    length = swap\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'binary':\n        return binaryWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; i++) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction binarySlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; i++) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; i++) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; i++) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  if (newBuf.length) newBuf.parent = this.parent || this\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('value is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = value < 0 ? 1 : 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = value < 0 ? 1 : 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('index out of range')\n  if (offset < 0) throw new RangeError('index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; i--) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; i++) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// fill(value, start=0, end=buffer.length)\nBuffer.prototype.fill = function fill (value, start, end) {\n  if (!value) value = 0\n  if (!start) start = 0\n  if (!end) end = this.length\n\n  if (end < start) throw new RangeError('end < start')\n\n  // Fill 0 bytes; we're done\n  if (end === start) return\n  if (this.length === 0) return\n\n  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')\n  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')\n\n  var i\n  if (typeof value === 'number') {\n    for (i = start; i < end; i++) {\n      this[i] = value\n    }\n  } else {\n    var bytes = utf8ToBytes(value.toString())\n    var len = bytes.length\n    for (i = start; i < end; i++) {\n      this[i] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; i++) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; i++) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; i++) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; i++) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n","'use strict'\n\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nfunction init () {\n  var i\n  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\n  var len = code.length\n\n  for (i = 0; i < len; i++) {\n    lookup[i] = code[i]\n  }\n\n  for (i = 0; i < len; ++i) {\n    revLookup[code.charCodeAt(i)] = i\n  }\n  revLookup['-'.charCodeAt(0)] = 62\n  revLookup['_'.charCodeAt(0)] = 63\n}\n\ninit()\n\nfunction toByteArray (b64) {\n  var i, j, l, tmp, placeHolders, arr\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // the number of equal signs (place holders)\n  // if there are two placeholders, than the two characters before it\n  // represent one byte\n  // if there is only one, then the three characters before it represent 2 bytes\n  // this is just a cheap hack to not do indexOf twice\n  placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0\n\n  // base64 is 4/3 + up to two characters of the original data\n  arr = new Arr(len * 3 / 4 - placeHolders)\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  l = placeHolders > 0 ? len - 4 : len\n\n  var L = 0\n\n  for (i = 0, j = 0; i < l; i += 4, j += 3) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]\n    arr[L++] = (tmp & 0xFF0000) >> 16\n    arr[L++] = (tmp & 0xFF00) >> 8\n    arr[L++] = tmp & 0xFF\n  }\n\n  if (placeHolders === 2) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[L++] = tmp & 0xFF\n  } else if (placeHolders === 1) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var output = ''\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    output += lookup[tmp >> 2]\n    output += lookup[(tmp << 4) & 0x3F]\n    output += '=='\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])\n    output += lookup[tmp >> 10]\n    output += lookup[(tmp >> 4) & 0x3F]\n    output += lookup[(tmp << 2) & 0x3F]\n    output += '='\n  }\n\n  parts.push(output)\n\n  return parts.join('')\n}\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = setTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    clearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n"],"sourceRoot":"/source/"}